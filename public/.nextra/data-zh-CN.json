{"/":{"title":"介绍","data":{"":"\n\n"}},"/docs/essentials/getting-started":{"title":"入门","data":{"":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<1kb 专注于编译器的虚拟 DOM - 速度非常快！\n\n当前虚拟 DOM 的实施功效并没有充分发挥出来。有些过于复杂而限制其有效地实施；有些则半途而废。如果不牺牲其初始性能和规模，其中大多数实际上是不可用的。大多要以牺牲性能和大小为代价进行调整，才变得可用。Million 就是针对这个问题的一套解决方案。它提供了一个与库无关的虚拟 DOM 作为 Javascript 库的核心，专注于预编译和静态分析。\n使用 Million，您可以获得虚拟 DOM 的声明性和灵活性，同时 利用 编译器感知优化的\n性能。\n","overview#Overview":"\nimport { m, createElement, patch } from 'million';\n\n// Initialize app\nconst app = createElement(m('div', { id: 'app' }, ['Hello World']));\ndocument.body.appendChild(app);\n// Patch content\npatch(app, m('div', { id: 'app' }, ['Goodbye World']));\n在此示例中，构造了一个虚拟节点并从中创建了一个 HTMLElement (<div id=\"app\">Hello World</div>)。 HTMLElement 附加到实时页面，然后使用虚拟节点（<div id=\"app\">Goodbye World</div>）修补（更新）。","资源--反馈#资源 & 反馈":"寻找文档？在 这里 查看。对 Million 有疑惑？把它贴在 GitHub Discussions 并向社区寻求帮助。发现一个 bug？前往 issue tracker 我们会尽力帮助你。 我们也欢迎提交 PR。我们希望所有的 Million 贡献者遵守我们的条款 Code of Conduct。→ 开始在 GitHub 上贡献代码吧"}},"/docs/essentials/compiler":{"title":"编译器","data":{"":"Million.js 旨在成为您应用程序的虚拟 DOM 运行时。它的主要设计目的是通过一个可以为 Million.js 产生优化和代码生成的编译器来增强它。然而，Million.js 默认不提供编译器，因为在不了解库（状态、组件等）的情况下很难很好地完成静态分析和代码生成。但是，Million.js 确实为具有 vite-plugin-million 的原始对象提供了虚拟节点 h 函数的示例实现。如果您正在考虑为您的 Million.js 库编写编译器，请考虑查看 vite-plugin-million 的实现。此外，您应该研究 recast 和 ast-types，它们都是 JavaScript AST 的绝佳选择遍历静态分析。"}},"/docs/essentials/installation":{"title":"安装","data":{"":"＃ 安装有两种方法可以将 Million 包含到您的项目中：\n将其作为模块导入\n从 <script> 标签中包含它\n\nMillion 默认情况下不需要构建工具，但强烈建议您使用 NPM 安装，尤其是在构建 UI 库时。","作为一个模块#作为一个模块":"如果您使用 NPM 安装 Million，请确保使用 Vite 或 Rollup 等捆绑程序。运行以下命令进行安装。\nnpm install million\n现在，将 Million 导入到您的源文件中，如下所示：\nimport {\n  m,\n  patch,\n  createElement,\n  /* or any other exports you want to access */\n} from 'million';\n","来自脚本标签#来自脚本标签":"这是迄今为止最简单的开始使用 Million 的方法。在 HTML 页面的头部包含以下 <script> 标记。然后，使用类似 UNPKG 的 CDN 并通过 ES 模块导入百万。\n<script type=\"module\">\n  import {\n    m,\n    patch,\n    createElement,\n    /* or any other exports you want to access */\n  } from 'https://unpkg.com/million?module';\n\n  // Your code here\n</script>\n而已！百万现在可以在您的页面内使用。"}},"/docs/functions/createElement":{"title":"createElement","data":{"":"语法： createElement(vnode, attachField = true)\n示例： createElement(m('div'))createElement 函数将 VNode 转换为 HTMLElement 或 Text。 它接受一个 VNode（VElement 或字符串）。 这通常用于初始化根元素以在修补期间用作参考。\nimport { m, createElement, Flags } from 'million';\n\nconst vnode = m('div', { id: 'app' }, ['Hello World'], Flags.ONLY_TEXT_CHILDREN);\nconst el = createElement(vnode);\n\ndocument.body.appendChild(el);\n\n<div id=\"app\">Hello World</div>\n","old_vnode_field-属性#OLD_VNODE_FIELD 属性":"OLD_VNODE_FIELD 属性是百万名址上的全局导出，它会自动附加到新的 HTMLElement 以供在修补过程中参考。 如果您能够自己管理旧的 VNode 状态，您可以通过将 attachField 参数设置为 false 来禁用此功能。"}}}